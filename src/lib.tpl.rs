/// This file is automatically generated by `build.rs`. Any changes made here will be
/// lost forever.
///
/// Any modification must be done in `lib.tpl.rs` and it will be compiled automatically
/// by build.rs
use std::collections::HashSet;
use std::str::FromStr;
use strum::IntoEnumIterator;
use strum_macros::{Display, EnumIter};
use textcat::storage::FileContent;

#[derive(Clone, Debug, EnumIter, Eq, Display, PartialEq, Hash, Ord, PartialOrd)]
pub enum Language {
    {% for lang in languages %}
        {{lang|capitalize}},{% endfor %}
}

impl Language {
    pub fn name(&self) -> &'static str {
        match self {
            {% for lang in languages %}
            Self::{{lang|capitalize}} => "{{lang}}",{% endfor %}
        }
    }

    pub fn all() -> HashSet<Language> {
        Language::iter().collect()
    }
}

impl FromStr for Language {
    type Err = String;

    fn from_str(name: &str) -> Result<Language, String> {
        match name.to_lowercase().as_str() {
        {% for lang in languages %}
            "{{lang}}" => Ok(Self::{{lang|capitalize}}),{% endfor %}
        _ => Err("Invalid argument".to_string()),
        }
    }
}

pub struct Lingo {
    built_in: FileContent,
}

#[allow(clippy::new_without_default)]
impl Lingo {
    pub fn new() -> Self {
        Lingo {
            built_in: Self::get_embed_languages(),
        }
    }
    
    pub fn get_language(&self, sample: &str) -> Option<Language> {
        self.built_in
            .get_category(sample)
            .map(|r| Language::from_str(r.as_str()).unwrap())
    }

    pub fn get_languages(&self, sample: &str) -> Option<Vec<(Language, u64)>> {
        Some(self.built_in
            .get_categories(sample)?
            .iter()
            .map(|r| (Language::from_str(&r.0).unwrap(), r.1))
            .collect()
        )
    }

    pub fn get_embed_languages() -> FileContent {
        FileContent::from_vec(vec![
        {% for c in ngrams %}
            (
                Language::{{c.0|capitalize}}.name(),
                vec![
                {% for ngram in c.1|slice(end=400) %}
                    "{{ngram}}",{% endfor %}
                ]
            ),{% endfor %}
        ]
        )
    }
}

mod test {
    #[allow(unused_imports)]
    use crate::{Language, Lingo};

    {% for test in tests %}
        #[test]
        fn test_{{test['category']}}_from_str() {
            assert_eq!(Language::{{test['category']|capitalize}}.name(), "{{test['category']|addslashes}}");
        }

        {% set i = loop.index %}
        {% for text in test['fixtures'] %}
        #[test]
        fn test_{{test['category']}}_{{i}}{{loop.index}}() {
            let l = Lingo::new();
            let sample = "{{text|addslashes}}";
            assert_eq!(
                Language::{{test['category']|capitalize}},
                l.get_language(sample).unwrap(),
                "{}",
                sample
            );
        }
        {% endfor %}
    {% endfor %}
}
